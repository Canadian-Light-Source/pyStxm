import numpy as np
import pprint

def process_sis3820_data(md, doc):
    """
    ('event', {'descriptor': '3b9f225b-9f74-4ae1-a468-c347bb7e5cff', 'uid': '9e7561cc-9231-4d6d-afae-1190a7ee0cbd', 'time': 1676490522.2321472, 'seq_num': 50, 'data': {'SIS3820_waveform_rbv': [0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 2044]}, 'timestamps': {'SIS3820_waveform_rbv': 1676490522.2321472}, 'filled': {}, '_name': 'Event'})
    """
    data_dct = {}
    data_map = md['data_map']
    num_chans = len(md['data_map'])
    d_keys = list(doc[1]['data'].keys())
    for k in d_keys:
        if k.find('SIS3820') > -1:
            data_lst = doc[1]['data'][k]
            if type(data_lst) == list:
                arr = np.array(data_lst)
                # take a slice of data array to pull out all values of each channel
                for ch_num in range(num_chans):
                    ch_num = ch_num + 1
                    ch_dct = data_map[ch_num]
                    # numpy slicing start:stop:step
                    dat = arr[ch_num-1::ch_num]
                    # first point is total array size so skip it
                    ddat = dat[1:]
                    data_dct[ch_dct['chan_nm']] = ddat

        pprint.pprint(data_dct)

md = {'data_map': {'ch_0':0, 'ch_1':1, 'ch_2':2, 'ch_3':3, 'ch_4':4, 'ch_5':5, }}
arr = np.array([21,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5])
doc = {}
doc['event'] = {'data': arr}
print()
